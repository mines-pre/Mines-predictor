from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os
import json
import random
import asyncio
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Environment variables
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')
VERCEL_URL = os.environ.get('VERCEL_URL', 'https://mines-predictor-ten.vercel.app')
AFFILIATE_LINK = os.environ.get('AFFILIATE_LINK', 'https://lkpq.cc/cd7800')

# Global storage (Vercel compatible - in-memory)
users_storage = {}
postback_storage = []

# Conversation states
ENTER_PLAYER_ID = 1

# Mines Signals
MINES_SIGNALS = [
    {"traps": 1, "accuracy": 97, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯФТЁЯТ░", "ЁЯФТЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯТ░"]},
    {"traps": 1, "accuracy": 90, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯТ░ЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 96, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯТ░", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯТ░", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 95, "grid": ["ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯТ░ЁЯФТ"]},
    {"traps": 1, "accuracy": 96, "grid": ["ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯТ░ЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 91, "grid": ["ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯТ░ЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 94, "grid": ["ЁЯФТЁЯТ░ЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯТ░", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 92, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯТ░ЁЯТ░ЁЯФТЁЯФТЁЯТ░", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 90, "grid": ["ЁЯТ░ЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 92, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯТ░ЁЯФТ"]},
    {"traps": 1, "accuracy": 93, "grid": ["ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 97, "grid": ["ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯТ░ЁЯФТЁЯФТЁЯТ░", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 90, "grid": ["ЁЯТ░ЁЯФТЁЯФТЁЯТ░ЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ"]},
    {"traps": 1, "accuracy": 96, "grid": ["ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯТ░ЁЯТ░ЁЯФТ"]},
    {"traps": 1, "accuracy": 94, "grid": ["ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯФТЁЯФТЁЯТ░ЁЯФТЁЯФТ", "ЁЯТ░ЁЯФТЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ", "ЁЯФТЁЯТ░ЁЯФТЁЯФТЁЯФТ"]}
]

# Language Messages
MESSAGES = {
    'en': {
        'welcome': 'тЬЕ *You selected English!*',
        'step1': 'ЁЯМР *Step 1 - Register*',
        'account_must_be_new': 'тА╝я╕П THE ACCOUNT MUST BE NEW',
        'step1_instructions': '1я╕ПтГг If after clicking the "REGISTER" button you get to the old account, you need to log out of it and click the button again.\n\n2я╕ПтГг Specify a promocode during registration: *OGGY*\n\n3я╕ПтГг Make a Minimum deposit atleast *500тВ╣ or 5$* in any currency',
        'after_success': 'тЬЕ After Successfully REGISTRATION, click the "CHECK REGISTRATION" button',
        'enter_player_id': 'ЁЯОп *Please enter your 1Win Player ID to verify:*',
        'how_to_find_id': 'ЁЯУЭ *How to find Player ID:*\n1. Login to 1Win account\n2. Go to Profile Settings\n3. Copy Player ID number\n4. Paste it here',
        'enter_id_now': 'ЁЯФв *Enter your Player ID now:*',
        'congratulations': 'ЁЯОЙ *Congratulations!*',
        'not_registered': 'тЭМ *Sorry, You are Not Registered!*',
        'not_registered_msg': 'Please click the REGISTER button first and complete your registration using our link.\n\nAfter successful registration, come back and enter your Player ID.',
        'registered_no_deposit': 'ЁЯОЙ *Great, you have successfully completed registration!*',
        'sync_success': 'тЬЕ Your account is synchronized with the bot',
        'deposit_required': 'ЁЯТ┤ To gain access to signals, deposit your account (make a deposit) with at least *500тВ╣ or $5* in any currency',
        'after_deposit': 'ЁЯХ╣я╕П After successfully replenishing your account, click on the CHECK DEPOSIT button and gain access',
        'limit_reached': "тЪая╕П *You've Reached Your Limit!*",
        'deposit_again': 'Please deposit again atleast *400тВ╣ or 4$* in any currency for continue prediction',
        'get_signal': 'ЁЯХ╣я╕П Get a signal',
        'next_signal': 'ЁЯФД Next Signal',
        'back': 'ЁЯФЩ Back',
        'deposit_again_btn': 'ЁЯТ░ Deposit Again',
        'register_now': 'ЁЯУ▓ Register Now',
        'check_deposit': 'ЁЯФН Check Deposit',
        'register_btn': 'ЁЯУ▓ Register',
        'check_registration_btn': 'ЁЯФН Check Registration'
    },
    'hi': {
        'welcome': 'тЬЕ *рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!*',
        'step1': 'ЁЯМР *рдЪрд░рдг 1 - рдкрдВрдЬреАрдХрд░рдг*',
        'account_must_be_new': 'тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП',
        'step1_instructions': '1я╕ПтГг рдпрджрд┐ "рдкрдВрдЬреАрдХрд░рдг" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЖрдкрдХреЛ рдкреБрд░рд╛рдирд╛ рдЦрд╛рддрд╛ рдорд┐рд▓рддрд╛ рд╣реИ, рддреЛ рдЖрдкрдХреЛ рдЙрд╕рд╕реЗ рд▓реЙрдЧ рдЖрдЙрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ рдФрд░ рдмрдЯрди рдХреЛ рдлрд┐рд░ рд╕реЗ рдХреНрд▓рд┐рдХ рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред\n\n2я╕ПтГг рдкрдВрдЬреАрдХрд░рдг рдХреЗ рджреМрд░рд╛рди рдкреНрд░реЛрдореЛрдХреЛрдб рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░реЗрдВ: *OGGY*\n\n3я╕ПтГг рдиреНрдпреВрдирддрдо рдЬрдорд╛ рдХрд░реЗрдВ рдХрдо рд╕реЗ рдХрдо *500тВ╣ рдпрд╛ 5$* рдХрд┐рд╕реА рднреА рдореБрджреНрд░рд╛ рдореЗрдВ',
        'after_success': 'тЬЕ рд╕рдлрд▓ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдмрд╛рдж, "рдкрдВрдЬреАрдХрд░рдг рдЬрд╛рдВрдЪреЗрдВ" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
        'enter_player_id': 'ЁЯОп *рдХреГрдкрдпрд╛ рд╕рддреНрдпрд╛рдкрди рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ 1Win Player ID рджрд░реНрдЬ рдХрд░реЗрдВ:*',
        'how_to_find_id': 'ЁЯУЭ *Player ID рдХреИрд╕реЗ рдвреВрдВрдвреЗрдВ:*\n1. 1Win рдЦрд╛рддреЗ рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ\n2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкрд░ рдЬрд╛рдПрдВ\n3. Player ID рдирдВрдмрд░ рдХреЙрдкреА рдХрд░реЗрдВ\n4. рдпрд╣рд╛рдВ рдкреЗрд╕реНрдЯ рдХрд░реЗрдВ',
        'enter_id_now': 'ЁЯФв *рдЕрдкрдирд╛ Player ID рдЕрднреА рджрд░реНрдЬ рдХрд░реЗрдВ:*',
        'congratulations': 'ЁЯОЙ *рдмрдзрд╛рдИ рд╣реЛ!*',
        'not_registered': 'тЭМ *рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЖрдк рдкрдВрдЬреАрдХреГрдд рдирд╣реАрдВ рд╣реИрдВ!*',
        'not_registered_msg': 'рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ REGISTER рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рд╣рдорд╛рд░реЗ рд▓рд┐рдВрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдкрдирд╛ рдкрдВрдЬреАрдХрд░рдг рдкреВрд░рд╛ рдХрд░реЗрдВред\n\nрд╕рдлрд▓ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдмрд╛рдж, рд╡рд╛рдкрд╕ рдЖрдПрдВ рдФрд░ рдЕрдкрдирд╛ Player ID рджрд░реНрдЬ рдХрд░реЗрдВред',
        'registered_no_deposit': 'ЁЯОЙ *рдмрдврд╝рд┐рдпрд╛, рдЖрдкрдиреЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкрдВрдЬреАрдХрд░рдг рдкреВрд░рд╛ рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ!*',
        'sync_success': 'тЬЕ рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рдмреЙрдЯ рдХреЗ рд╕рд╛рде рд╕рд┐рдВрдХреНрд░рдирд╛рдЗрдЬрд╝ рд╣реЛ рдЧрдпрд╛ рд╣реИ',
        'deposit_required': 'ЁЯТ┤ рд╕рд┐рдЧреНрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рдХрдо рд╕реЗ рдХрдо *500тВ╣ рдпрд╛ $5* рдХрд┐рд╕реА рднреА рдореБрджреНрд░рд╛ рдореЗрдВ рдЬрдорд╛ рдХрд░реЗрдВ',
        'after_deposit': 'ЁЯХ╣я╕П рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднрд░рдиреЗ рдХреЗ рдмрд╛рдж, CHECK DEPOSIT рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдкрд╣реБрдВрдЪ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'limit_reached': "тЪая╕П *рдЖрдк рдЕрдкрдиреА рд╕реАрдорд╛ рддрдХ рдкрд╣реБрдБрдЪ рдЧрдП рд╣реИрдВ!*",
        'deposit_again': 'рдХреГрдкрдпрд╛ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдлрд┐рд░ рд╕реЗ рдХрдо рд╕реЗ рдХрдо *400тВ╣ рдпрд╛ 4$* рдХрд┐рд╕реА рднреА рдореБрджреНрд░рд╛ рдореЗрдВ рдЬрдорд╛ рдХрд░реЗрдВ',
        'get_signal': 'ЁЯХ╣я╕П рд╕рд┐рдЧреНрдирд▓ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'next_signal': 'ЁЯФД рдЕрдЧрд▓рд╛ рд╕рд┐рдЧреНрдирд▓',
        'back': 'ЁЯФЩ рд╡рд╛рдкрд╕',
        'deposit_again_btn': 'ЁЯТ░ рдлрд┐рд░ рд╕реЗ рдЬрдорд╛ рдХрд░реЗрдВ',
        'register_now': 'ЁЯУ▓ рдЕрднреА рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ',
        'check_deposit': 'ЁЯФН рдЬрдорд╛ рдЬрд╛рдВрдЪреЗрдВ',
        'register_btn': 'ЁЯУ▓ рдкрдВрдЬреАрдХрд░рдг',
        'check_registration_btn': 'ЁЯФН рдкрдВрдЬреАрдХрд░рдг рдЬрд╛рдВрдЪреЗрдВ'
    },
    'bn': {
        'welcome': 'тЬЕ *ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!*',
        'step1': 'ЁЯМР *ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи*',
        'account_must_be_new': 'тА╝я╕П ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ',
        'step1_instructions': 'рззя╕ПтГг "ржирж┐ржмржирзНржзржи" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж╛рж░ ржкрж░рзЗ ржпржжрж┐ ржЖржкржирж┐ ржкрзБрж░рж╛ржирзЛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржкрзНрж░ржмрзЗрж╢ ржХрж░рзЗржи, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржПржЯрж┐ ржерзЗржХрзЗ рж▓ржЧ ржЖржЙржЯ ржХрж░рждрзЗ рж╣ржмрзЗ ржПржмржВ ржмрж╛ржЯржиржЯрж┐ ржЖржмрж╛рж░ ржХрзНрж▓рж┐ржХ ржХрж░рждрзЗ рж╣ржмрзЗред\n\nрзия╕ПтГг ржирж┐ржмржирзНржзржирзЗрж░ рж╕ржоржпрж╝ ржкрзНрж░ржорзЛржХрзЛржб ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзБржи: *OGGY*\n\nрзйя╕ПтГг ржирзНржпрзВржирждржо ржЬржорж╛ ржХрж░рзБржи ржХржоржкржХрзНрж╖рзЗ *500тВ╣ ржмрж╛ 5$* ржпрзЗржХрзЛржирзЛ ржорзБржжрзНрж░рж╛ржпрж╝',
        'after_success': 'тЬЕ рж╕ржлрж▓ ржирж┐ржмржирзНржзржирзЗрж░ ржкрж░рзЗ, "ржирж┐ржмржирзНржзржи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи" ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'enter_player_id': 'ЁЯОп *ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ 1Win Player ID рж▓рж┐ржЦрзБржи:*',
        'how_to_find_id': 'ЁЯУЭ *Player ID ржХрж┐ржнрж╛ржмрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржмрзЗржи:*\n1. 1Win ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ рж▓ржЧржЗржи ржХрж░рзБржи\n2. ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржпрж╛ржи\n3. Player ID ржиржорзНржмрж░ ржХржкрж┐ ржХрж░рзБржи\n4. ржПржЦрж╛ржирзЗ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи',
        'enter_id_now': 'ЁЯФв *ржПржЦржиржЗ ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи:*',
        'congratulations': 'ЁЯОЙ *ржЕржнрж┐ржиржирзНржжржи!*',
        'not_registered': 'тЭМ *ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржирж┐ржмржирзНржзрж┐ржд ржиржи!*',
        'not_registered_msg': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ REGISTER ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЖржорж╛ржжрзЗрж░ рж▓рж┐ржЩрзНржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж╛рж░ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржиред\n\nрж╕ржлрж▓ ржирж┐ржмржирзНржзржирзЗрж░ ржкрж░рзЗ, ржлрж┐рж░рзЗ ржЖрж╕рзБржи ржПржмржВ ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржиред',
        'registered_no_deposit': 'ЁЯОЙ *ржжрж╛рж░рзБржи, ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзЗржЫрзЗржи!*',
        'sync_success': 'тЬЕ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржмржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛ржЗржЬ рж╣ржпрж╝рзЗржЫрзЗ',
        'deposit_required': 'ЁЯТ┤ рж╕рж┐ржЧржирзНржпрж╛рж▓ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрзЗрждрзЗ, ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржХржоржкржХрзНрж╖рзЗ *500тВ╣ ржмрж╛ $5* ржпрзЗржХрзЛржирзЛ ржорзБржжрзНрж░рж╛ржпрж╝ ржЬржорж╛ ржХрж░рзБржи',
        'after_deposit': 'ЁЯХ╣я╕П ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐ржЪрж╛рж░рзНржЬ ржХрж░рж╛рж░ ржкрж░рзЗ, CHECK DEPOSIT ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржи',
        'limit_reached': "тЪая╕П *ржЖржкржирж┐ ржЖржкржирж╛рж░ рж╕рзАржорж╛ржпрж╝ ржкрзМржБржЫрзЗ ржЧрзЗржЫрзЗржи!*",
        'deposit_again': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржмрж╛рж░ ржХржоржкржХрзНрж╖рзЗ *400тВ╣ ржмрж╛ 4$* ржпрзЗржХрзЛржирзЛ ржорзБржжрзНрж░рж╛ржпрж╝ ржЬржорж╛ ржХрж░рзБржи',
        'get_signal': 'ЁЯХ╣я╕П рж╕рж┐ржЧржирзНржпрж╛рж▓ ржкрж╛ржи',
        'next_signal': 'ЁЯФД ржкрж░ржмрж░рзНрждрзА рж╕рж┐ржЧржирзНржпрж╛рж▓',
        'back': 'ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи',
        'deposit_again_btn': 'ЁЯТ░ ржЖржмрж╛рж░ ржЬржорж╛ ржХрж░рзБржи',
        'register_now': 'ЁЯУ▓ ржПржЦржиржЗ ржирж┐ржмржирзНржзржи ржХрж░рзБржи',
        'check_deposit': 'ЁЯФН ржЬржорж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи',
        'register_btn': 'ЁЯУ▓ ржирж┐ржмржирзНржзржи',
        'check_registration_btn': 'ЁЯФН ржирж┐ржмржирзНржзржи ржкрж░рзАржХрзНрж╖рж╛'
    }
}

def get_message(lang, key):
    return MESSAGES.get(lang, MESSAGES['en']).get(key, '')

# Storage functions (Vercel compatible - in-memory)
def get_user(user_id):
    user_id = str(user_id)
    return users_storage.get(user_id, {
        'user_id': user_id,
        'player_id': None,
        'language': 'en',
        'registered': False,
        'total_deposit': 0,
        'predictions_used': 0
    })

def update_user(user_id, **kwargs):
    user_id = str(user_id)
    if user_id not in users_storage:
        users_storage[user_id] = {'user_id': user_id}
    
    for key, value in kwargs.items():
        users_storage[user_id][key] = value

def add_postback_event(event_type, user_id, amount=0):
    postback_storage.append({
        'event_type': event_type,
        'user_id': user_id,
        'amount': amount,
        'timestamp': str(asyncio.get_event_loop().time()) if asyncio.get_event_loop() else '0'
    })

def check_user_status(player_id):
    """Check user registration and deposit status"""
    user_events = [event for event in postback_storage if event['user_id'] == player_id]
    
    if not user_events:
        return "not_registered"
    
    has_registration = any(event['event_type'] == 'registration' for event in user_events)
    total_deposit = sum(event['amount'] for event in user_events if event['event_type'] in ['first_deposit', 'deposit', 'recurring_deposit'])
    
    if not has_registration:
        return "not_registered"
    elif total_deposit < 5:
        return "registered_no_deposit"
    else:
        return "verified"

# Initialize Telegram application
def initialize_bot():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return None
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Add handlers
        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(handle_check_registration, pattern="^check_registration$"),
                CallbackQueryHandler(handle_check_deposit, pattern="^check_deposit$")
            ],
            states={
                ENTER_PLAYER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_player_id)]
            },
            fallbacks=[],
            per_message=False
        )
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_language, pattern="^lang_"))
        application.add_handler(conv_handler)
        application.add_handler(CallbackQueryHandler(handle_get_signal, pattern="^get_signal$"))
        application.add_handler(CallbackQueryHandler(handle_next_signal, pattern="^next_signal$"))
        application.add_handler(CallbackQueryHandler(handle_back_to_start, pattern="^back_to_start$"))
        
        logger.info("Bot initialized successfully")
        return application
        
    except Exception as e:
        logger.error(f"Failed to initialize bot: {e}")
        return None

# Initialize bot
telegram_app = initialize_bot()

# Telegram Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    keyboard = [
        [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data="lang_en")],
        [InlineKeyboardButton("ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА", callback_data="lang_hi")],
        [InlineKeyboardButton("ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛", callback_data="lang_bn")],
        [InlineKeyboardButton("ЁЯЗ╡ЁЯЗ░ ╪з╪▒╪п┘И", callback_data="lang_ur")],
        [InlineKeyboardButton("ЁЯЗ│ЁЯЗ╡ рдиреЗрдкрд╛рд▓реА", callback_data="lang_ne")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "**Select your preferred Language:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    language = query.data.split('_')[1]
    user_id = query.from_user.id
    
    update_user(user_id, language=language)
    await show_registration_section(query, context, language)

async def show_registration_section(query, context: ContextTypes.DEFAULT_TYPE, language):
    keyboard = [
        [InlineKeyboardButton(get_message(language, 'register_btn'), url=AFFILIATE_LINK)],
        [InlineKeyboardButton(get_message(language, 'check_registration_btn'), callback_data="check_registration")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        f"{get_message(language, 'welcome')}\n\n"
        f"{get_message(language, 'step1')}\n\n"
        f"{get_message(language, 'account_must_be_new')}\n\n"
        f"{get_message(language, 'step1_instructions')}\n\n"
        f"{get_message(language, 'after_success')}"
    )
    
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    language = user.get('language', 'en')
    
    await query.edit_message_text(
        f"{get_message(language, 'enter_player_id')}\n\n"
        f"{get_message(language, 'how_to_find_id')}\n\n"
        f"{get_message(language, 'enter_id_now')}",
        parse_mode='Markdown'
    )
    
    return ENTER_PLAYER_ID

async def handle_player_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player_id = update.message.text.strip()
    user = get_user(user_id)
    language = user.get('language', 'en')
    
    # For testing - predefined test cases
    if player_id == 'test123':
        user_status = "not_registered"
    elif player_id == 'test456':
        user_status = "registered_no_deposit"
    elif player_id == 'test789':
        user_status = "verified"
    else:
        user_status = check_user_status(player_id)
    
    if user_status == "not_registered":
        keyboard = [[InlineKeyboardButton(get_message(language, 'register_now'), url=AFFILIATE_LINK)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{get_message(language, 'not_registered')}\n\n{get_message(language, 'not_registered_msg')}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    elif user_status == "registered_no_deposit":
        keyboard = [
            [InlineKeyboardButton("ЁЯТ░ Deposit", url=AFFILIATE_LINK)],
            [InlineKeyboardButton(get_message(language, 'check_deposit'), callback_data="check_deposit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{get_message(language, 'registered_no_deposit')}\n\n"
            f"{get_message(language, 'sync_success')}\n\n"
            f"{get_message(language, 'deposit_required')}\n\n"
            f"{get_message(language, 'after_deposit')}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    elif user_status == "verified":
        update_user(user_id, player_id=player_id)
        
        keyboard = [[InlineKeyboardButton(get_message(language, 'get_signal'), callback_data="get_signal")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            get_message(language, 'congratulations'),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return ConversationHandler.END

async def handle_get_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    language = user.get('language', 'en')
    
    # Check prediction limit
    predictions_used = user.get('predictions_used', 0)
    
    if predictions_used >= 15:
        await show_deposit_again_message(query, context, language)
        return
    
    # Get random signal
    signal = random.choice(MINES_SIGNALS)
    
    # Update prediction count
    update_user(user_id, predictions_used=predictions_used + 1)
    
    # Format signal message
    signal_text = (
        f"ЁЯТг *Mines - Signals* ЁЯТг\n"
        f"тЮЦтЮЦтЮЦтЮЦтЮЦтЮЦтЮЦ\n"
        f"ЁЯТг *Select:* {signal['traps']} traps\n"
        f"ЁЯТб *Accuracy:* {signal['accuracy']}%\n"
        f"тЮЦтЮЦтЮЦтЮЦтЮЦтЮЦтЮЦ\n"
        f"ЁЯСЙ *Open the cells* ЁЯСЗ\n\n"
    )
    
    for row in signal['grid']:
        signal_text += f"{row}\n"
    
    signal_text += f"\nтЮЦтЮЦтЮЦтЮЦтЮЦтЮЦтЮЦ\n"
    signal_text += f"тЭЗя╕П *Get a new signal* ЁЯСЗ"
    
    # Create buttons
    keyboard = [
        [
            InlineKeyboardButton(get_message(language, 'next_signal'), callback_data="next_signal"),
            InlineKeyboardButton(get_message(language, 'back'), callback_data="back_to_start")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        signal_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_next_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.delete_message()
    await handle_get_signal(update, context)

async def handle_back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    language = user.get('language', 'en')
    
    await show_registration_section(query, context, language)

async def handle_check_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    language = user.get('language', 'en')
    
    await query.edit_message_text(
        f"{get_message(language, 'enter_player_id')}\n\n"
        f"{get_message(language, 'how_to_find_id')}\n\n"
        f"{get_message(language, 'enter_id_now')}",
        parse_mode='Markdown'
    )
    
    return ENTER_PLAYER_ID

async def show_deposit_again_message(query, context: ContextTypes.DEFAULT_TYPE, language):
    keyboard = [[InlineKeyboardButton(get_message(language, 'deposit_again_btn'), url=AFFILIATE_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"{get_message(language, 'limit_reached')}\n\n{get_message(language, 'deposit_again')}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Flask Routes
@app.route('/')
def home():
    return "ЁЯдЦ Mines Predictor Bot is Running! Webhook active."

@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        if telegram_app:
            update = Update.de_json(request.get_json(), telegram_app.bot)
            await telegram_app.process_update(update)
        return "OK"
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "ERROR", 500

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    if telegram_app and BOT_TOKEN:
        webhook_url = f"{VERCEL_URL}/webhook"
        try:
            # Use requests to set webhook synchronously
            import requests
            response = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook?url={webhook_url}")
            return f"тЬЕ Webhook set: {response.json()}"
        except Exception as e:
            return f"тЭМ Webhook error: {e}"
    return "тЭМ Bot not initialized"

@app.route('/postback', methods=['GET'])
def handle_postback():
    try:
        event_type = request.args.get('type')
        user_id = request.args.get('user_id')
        amount = request.args.get('amount', 0, type=float)
        
        logger.info(f"Postback received: {event_type} for user {user_id} amount {amount}")
        
        # Store postback event
        add_postback_event(event_type, user_id, amount)
        
        return jsonify({
            "status": "success", 
            "message": f"Postback received: {event_type}",
            "user_id": user_id,
            "amount": amount
        }), 200
        
    except Exception as e:
        logger.error(f"Postback error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/debug')
def debug():
    return jsonify({
        "users_count": len(users_storage),
        "postbacks_count": len(postback_storage),
        "webhook_url": f"{VERCEL_URL}/webhook",
        "bot_initialized": telegram_app is not None
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
